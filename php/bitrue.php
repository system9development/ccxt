<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use \ccxt\ExchangeError;
use \ccxt\ArgumentsRequired;
use \ccxt\OrderNotFound;

class bitrue extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe (), array(
            'id' => 'bitrue',
            'name' => 'Bitrue',
            'countries' => ['US'],
            'version' => 'v1',
            'rateLimit' => 3000,
            'urls' => array(
                'logo' => 'https://www.bitrue.com/includes/assets/346c710f38975f71fa8ea90f9f7457a3.svg',
                'api' => 'https://www.bitrue.com/api',
                'www' => 'https://bitrue.com',
                'doc' => 'https://github.com/Bitrue/bitrue-official-api-docs',
                'referral' => 'https://www.bitrue.com/activity/task/task-landing?inviteCode=TAEZWW&cn=900000',
            ),
            'has' => array(
                'fetchMarkets' => true,
                'fetchCurrencies' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchOrderBook' => true,
                'fetchOrderBooks' => false,
                'fetchTrades' => true,
                'fetchMyTrades' => true,
                'fetchTradingLimits' => false,
                'fetchTradingFees' => false,
                'fetchAllTradingFees' => false,
                'fetchFundingFees' => false,
                'fetchTime' => true,
                'fetchOrder' => true,
                'fetchOrders' => true,
                'fetchOpenOrders' => true,
                'fetchClosedOrders' => false,
                'fetchBalance' => true,
                'createMarketOrder' => true,
                'createOrder' => true,
                'cancelOrder' => true,
                'cancelOrders' => false,
                'cancelAllOrders' => false,
            ),
            'timeframes' => array(
                '1m' => '1m',
                '5m' => '5m',
                '15m' => '15m',
                '30m' => '30m',
                '1h' => '1h',
                '4h' => '4h',
                '12h' => '12h',
                '1d' => '1d',
                '1w' => '1w',
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'exchangeInfo',
                        'ticker/24hr',
                        'ticker/24hr',
                        'depth',
                        'trades',
                        'time',
                    ),
                ),
                'private' => array(
                    'get' => array(
                        'account',
                        'order',
                        'openOrders',
                        'myTrades',
                        'allOrders',
                    ),
                    'post' => array(
                        'order',
                    ),
                    'delete' => array(
                        'order',
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => false,
                    'percentage' => true,
                    'maker' => 0.1 / 100,
                    'taker' => 0.1 / 100,
                ),
            ),
            'commonCurrencies' => array(
                'PLA' => 'Plair',
            ),
            'options' => array(
                'timeDifference' => null, // the difference between system clock and Bitrue clock, normally about 57 seconds
                'adjustForTimeDifference' => true,
            ),
            'exceptions' => array(
                'codes' => array(
                    '-1' => '\\ccxt\\BadRequest',
                    '-2' => '\\ccxt\\BadRequest',
                    '1001' => '\\ccxt\\BadRequest',
                    '1004' => '\\ccxt\\ArgumentsRequired',
                    '1006' => '\\ccxt\\AuthenticationError',
                    '1008' => '\\ccxt\\AuthenticationError',
                    '1010' => '\\ccxt\\AuthenticationError',
                    '1011' => '\\ccxt\\PermissionDenied',
                    '2001' => '\\ccxt\\AuthenticationError',
                    '2002' => '\\ccxt\\InvalidOrder',
                    '2004' => '\\ccxt\\OrderNotFound',
                    '9003' => '\\ccxt\\PermissionDenied',
                ),
                'exact' => array(
                    'market does not have a valid value' => '\\ccxt\\BadRequest',
                    'side does not have a valid value' => '\\ccxt\\BadRequest',
                    'Account::AccountError => Cannot lock funds' => '\\ccxt\\InsufficientFunds',
                    'The account does not exist' => '\\ccxt\\AuthenticationError',
                ),
            ),
        ));
    }

    public function fetch_markets($params = array ()) {
        if ($this->options['adjustForTimeDifference']) {
            $this->load_time_difference();
        }
        $request = array( 'show_details' => true );
        $response = $this->publicGetExchangeInfo (array_merge($request, $params));
        $result = array();
        // $symbols = $this->safe_value($response, 'symbols');
        $markets = $this->safe_value($response, 'symbols');
        for ($i = 0; $i < count($markets); $i++) {
            $market = $markets[$i];
            $id = $this->safe_string_lower($market, 'symbol');
            $base = $this->safe_string_upper($market, 'baseAsset');
            $quote = $this->safe_string_upper($market, 'quoteAsset');
            $baseId = strtolower($base);
            $quoteId = strtolower($quote);
            $symbol = $base . '/' . $quote;
            $filters = $this->safe_value($market, 'filters');
            $price_filter = $this->safe_value($filters, 0);
            $volume_filter = $this->safe_value($filters, 1);
            $result[] = array(
                'id' => $id,
                'symbol' => $symbol,
                'base' => $base,
                'quote' => $quote,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'active' => true,
                'info' => $market,
                'precision' => array(
                    'amount' => $this->safe_value($volume_filter, 'volumeScale'),
                    'price' => $this->safe_value($price_filter, 'priceScale'),
                    'base' => $this->safe_value($volume_filter, 'volumeScale'),
                    'quote' => $this->safe_value($price_filter, 'priceScale'),
                ),
                'limits' => array(
                    'amount' => array(
                        'min' => $this->safe_value($volume_filter, 'minQty'),
                        'max' => $this->safe_value($volume_filter, 'maxQty'),
                    ),
                    'price' => array(
                        'min' => $this->safe_value($price_filter, 'minPrice'),
                        'max' => $this->safe_value($price_filter, 'maxPrice'),
                    ),
                    'cost' => array(
                        'min' => $this->safe_value($volume_filter, 'minQty'),
                        'max' => $this->safe_value($volume_filter, 'maxQty'),
                    ),
                ),
            );
        }
        return $result;
    }

    public function fetch_ticker($symbol, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $response = $this->publicGetTicker24hr (array_merge($request, $params));
        $data = $this->safe_value($response, 0);
        return $this->parse_ticker($data, $market);
    }

    public function fetch_tickers($symbols = null, $params = array ()) {
        $this->load_markets();
        $response = $this->publicGetTicker24hr ($params);
        return $this->parse_tickers($response, $symbols);
    }

    public function parse_ticker($ticker, $market = null) {
        $symbol = null;
        $marketId = $this->safe_string_lower($ticker, 'symbol');
        if (is_array($this->markets_by_id) && array_key_exists($marketId, $this->markets_by_id)) {
            $market = $this->markets_by_id[$marketId];
        }
        if ($market !== null) {
            $symbol = $market['symbol'];
        }
        $timestamp = $this->safe_timestamp($ticker, 'closeTime');
        if ($timestamp === null || $timestamp === 0) {
            $timestamp = $this->milliseconds();
        }
        $vwap = $this->safe_float($ticker, 'weightedAvgPrice');
        // response includes `volume`, but it is equal to `$quoteVolume`
        // since e.g. BTC/USDT volume = $quoteVolume ~ 30000000, we can assume it is $quoteVolume
        $baseVolume = null;
        $quoteVolume = $this->safe_float($ticker, 'quoteVolume');
        if (($quoteVolume !== null) && ($vwap !== null) && ($vwap > 0)) {
            $baseVolume = $quoteVolume / $vwap;
        }
        return array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $this->safe_float($ticker, 'highPrice'),
            'low' => $this->safe_float($ticker, 'lowPrice'),
            'bid' => $this->safe_float($ticker, 'bidPrice'),
            'bidVolume' => null,
            'ask' => $this->safe_float($ticker, 'askPrice'),
            'askVolume' => null,
            'vwap' => $vwap,
            'open' => $this->safe_float($ticker, 'openPrice'),
            'close' => $this->safe_float($ticker, 'lastPrice'),
            'last' => $this->safe_float($ticker, 'lastPrice'),
            'previousClose' => $this->safe_float($ticker, 'prevClosePrice'),
            'change' => $this->safe_float($ticker, 'priceChange'),
            'percentage' => null,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => $quoteVolume,
            'info' => $ticker,
        );
    }

    public function fetch_order_book($symbol, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = $this->publicGetDepth (array_merge($request, $params));
        $orderbook = $response ? $response : array();
        $timestamp = $this->safe_integer($orderbook, 'lastUpdateId');
        return $this->parse_order_book($orderbook, $timestamp);
    }

    public function fetch_trades($symbol, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = $this->publicGetTrades (array_merge($request, $params));
        $data = gettype($response) === 'array' && count(array_filter(array_keys($response), 'is_string')) == 0 ? $response : array();
        return $this->parse_trades($data, $market, $since, $limit);
    }

    public function fetch_my_trades($symbol = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $request = array();
        $market = $symbol ? $this->market($symbol) : null;
        if ($symbol !== null) {
            $request['symbol'] = $market['id'];
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        if ($since !== null) {
            $request['startTime'] = $since;
        }
        $response = $this->privateGetMyTrades (array_merge($request, $params));
        $data = gettype($response) === 'array' && count(array_filter(array_keys($response), 'is_string')) == 0 ? $response : array();
        return $this->parse_trades($data, $market, $since, $limit);
    }

    public function parse_trade($trade, $market = null) {
        $side = $this->safe_value($trade, 'isBuyer') ? 'buy' : 'sell';
        $takerOrMaker = $this->safe_value($trade, 'isMaker') ? 'maker' : 'taker';
        $symbol = null;
        if ($market !== null) {
            $symbol = $market['symbol'];
        }
        if ($symbol === null) {
            if ($market === null) {
                $market = $this->markets_by_id[$this->safe_string_lower($trade, 'symbol')];
            }
            $symbol = $market['symbol'];
        }
        $timestamp = $this->safe_integer($trade, 'time');
        if ($timestamp === null) {
            $timestamp = $this->parse8601($this->safe_string($trade, 'time'));
        }
        $price = $this->safe_float($trade, 'price');
        $amount = $this->safe_float($trade, 'qty');
        $cost = $price * $amount;
        return array(
            'info' => $trade,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'id' => $this->safe_string($trade, 'id'),
            'order' => null,
            'type' => 'limit',
            'takerOrMaker' => $takerOrMaker,
            'side' => $side,
            'price' => $price,
            'amount' => $amount,
            'cost' => $cost,
            'fee' => null,
        );
    }

    public function fetch_time($params = array ()) {
        $response = $this->publicGetTime ($params);
        $serverMillis = $this->safe_integer($response, 'serverTime');
        $localMillis = $this->milliseconds();
        $this->diffMillis = $serverMillis - $localMillis;
        return $serverMillis;
    }

    public function fetch_balance($params = array ()) {
        $this->load_markets();
        $response = $this->privateGetAccount ($params);
        $balances = $this->safe_value($response, 'balances');
        $result = array(
            'info' => $response,
        );
        for ($i = 0; $i < count($balances); $i++) {
            $balance = $balances[$i];
            $currencyId = $this->safe_value($balance, 'asset');
            $code = $this->safe_currency_code($currencyId);
            $account = $this->account();
            $account['free'] = $this->safe_float($balance, 'free');
            $account['used'] = $this->safe_float($balance, 'locked');
            $result[$code] = $account;
        }
        return $this->parse_balance($result, true);
    }

    public function create_order($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
            'side' => strtoupper($side),
            'type' => strtoupper($type),
            'quantity' => $this->amount_to_precision($symbol, $amount),
        );
        if (strtoupper($type) === 'LIMIT') {
            $request['price'] = $this->price_to_precision($symbol, $price);
        }
        $response = $this->privatePostOrder (array_merge($request, $params));
        // Note => Bitrue's API $response for order creation does not include information such as $type and $side
        return $this->parse_order($response, $market);
    }

    public function fetch_order($id, $symbol = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOrder() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'orderId' => $id,
            'symbol' => $market['id'],
        );
        $response = $this->privateGetOrder (array_merge($request, $params));
        $orderId = $this->safe_string($response, 'orderId');
        if ($orderId === null) {
            throw new OrderNotFound($this->id . ' could not find matching order');
        }
        return $this->parse_order($response, $market);
    }

    public function fetch_open_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOpenOrders() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        if ($since !== null) {
            $request['startTime'] = $since;
        }
        $response = $this->privateGetOpenOrders (array_merge($request, $params));
        $orders = gettype($response) === 'array' && count(array_filter(array_keys($response), 'is_string')) == 0 ? $response : array();
        return $this->parse_orders($orders, $market);
    }

    public function fetch_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOrders() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        if ($since !== null) {
            $request['startTime'] = $since;
        }
        $response = $this->privateGetAllOrders (array_merge($request, $params));
        $orders = gettype($response) === 'array' && count(array_filter(array_keys($response), 'is_string')) == 0 ? $response : array();
        return $this->parse_orders($orders, $market);
    }

    public function parse_order($order, $market = null) {
        $status = $this->parse_order_status($this->safe_string($order, 'status'));
        $symbol = null;
        if ($market !== null) {
            $symbol = $market['symbol'];
        } else {
            $symbol = $this->safe_symbol($this->safe_string($order, 'symbol'));
        }
        $timestamp = null;
        if (is_array($order) && array_key_exists('time', $order)) {
            $timestamp = $this->safe_integer($order, 'time');
        } else if (is_array($order) && array_key_exists('updateTime', $order)) {
            $timestamp = $this->safe_integer($order, 'updateTime');
        } else if (is_array($order) && array_key_exists('transactTime', $order)) {
            $timestamp = $this->safe_integer($order, 'transactTime');
        }
        $executedQty = $this->safe_float($order, 'executedQty');
        $cummulativeQuoteQty = $this->safe_float($order, 'cummulativeQuoteQty');
        $average = null;
        if ($executedQty !== null && $cummulativeQuoteQty !== null) {
            $average = ($executedQty > 0) ? $cummulativeQuoteQty / $executedQty : 0.0;
        }
        $amount = $this->safe_float($order, 'origQty');
        $remaining = ($amount !== null && $executedQty !== null) ? ($amount - $executedQty) : null;
        return $this->safe_order(array(
            'info' => $order,
            'id' => $this->safe_string($order, 'orderId'),
            'clientOrderId' => $this->safe_string($order, 'clientOrderId'),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'type' => $this->safe_string_lower($order, 'type'),
            'side' => $this->safe_string_lower($order, 'side'),
            'price' => $this->safe_float($order, 'price'),
            'amount' => $amount,
            'average' => $average,
            'filled' => $executedQty,
            'remaining' => $remaining,
            'status' => $status,
            'cost' => $cummulativeQuoteQty,
            'fee' => null,
            'trades' => null,
        ));
    }

    public function parse_order_status($status) {
        $statuses = array(
            'NEW' => 'open',
            'PARTIALLY_FILLED' => 'open',
            'FILLED' => 'closed',
            'CANCELED' => 'canceled',
            'PENDING_CANCEL' => 'canceled',
            'REJECTED' => 'failed',
            'EXPIRED' => 'expired',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function cancel_order($id, $symbol = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' cancelOrder() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
            'orderId' => $id,
        );
        $response = $this->privateDeleteOrder (array_merge($request, $params));
        return $this->parse_order($response);
    }

    public function load_time_difference($params = array ()) {
        $serverTime = $this->fetch_time($params);
        $after = $this->milliseconds();
        $this->options['timeDifference'] = $after - $serverTime;
        return $this->options['timeDifference'];
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = $this->urls['api'] . '/' . $this->version . '/' . $this->implode_params($path, $params);
        $query = $this->omit($params, $this->extract_params($path));
        if ($api === 'public') {
            if ($query) {
                $url .= '?' . $this->urlencode($query);
            }
        } else if ($api === 'private') {
            $this->check_required_credentials();
            $timestamp = ($this->options['timeDifference'] !== null) ? ($this->milliseconds() - $this->options['timeDifference']) : 0;
            $query = array_merge(array( 'timestamp' => $timestamp ), $query);
            $signStr = $this->urlencode($query);
            $signature = $this->hmac($this->encode($signStr), $this->encode($this->secret));
            $query = array_merge(array( 'signature' => $signature ), $query);
            if ($method === 'GET') {
                $url .= '?' . $signStr . '&$signature=' . $signature;
            } else {
                $body = $signStr . '&$signature=' . $signature;
            }
        }
        $headers = array( 'Content-Type' => 'application/json', 'X-MBX-APIKEY' => $this->apiKey );
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($code, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        //
        //     array("$code":1011,"$message":"This IP '5.228.233.138' is not allowed","data":array())
        //
        if ($response === null) {
            return;
        }
        $errorCode = $this->safe_string($response, 'code');
        $message = $this->safe_string($response, 'msg');
        if (($errorCode !== null) && ($errorCode !== '0')) {
            $feedback = $this->id . ' ' . $body;
            $this->throw_exactly_matched_exception($this->exceptions['codes'], $errorCode, $feedback);
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $message, $feedback);
            throw new ExchangeError($message);
        }
    }
}
