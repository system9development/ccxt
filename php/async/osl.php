<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\async\abstract\osl as Exchange;
use React\Async;

class osl extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'osl',
            'name' => 'OSL',
            'countries' => array( 'SG', 'AM', 'HK' ), // Singapore, Americas, Hong Kong
            'rateLimit' => 5, // OSL v4 allows 200 requests per second
            'certified' => false,
            'version' => '', // mix of '3' and 'v4' will be used; public endpoints are on '3'
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'cancelAllOrders' => null,                   // has, but not yet implemented
                'cancelOrder' => null,                       // has, but not yet implemented
                'createOrder' => null,                       // has, but not yet implemented
                'createStopLimitOrder' => false,
                'createStopMarketOrder' => false,
                'createStopOrder' => false,
                'fetchBalance' => true,
                'fetchBidsAsks' => null,                     // not sure what this is
                'fetchBorrowRate' => false,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchBorrowRates' => false,
                'fetchBorrowRatesPerSymbol' => false,
                'fetchClosedOrders' => null,                 // has, but not yet implemented, see /order with open=false, filter out open
                'fetchCurrencies' => false,
                'fetchDepositAddress' => null,               // has, but not yet implemented, see v3 api /receive
                'fetchDeposits' => null,                     // api v3 might have this
                'fetchMarginMode' => false,
                'fetchMarkets' => true,                           // api v4/instruments, requires auth
                'fetchMyTrades' => null,                     // has, but not yet implemented, see /executions
                'fetchOHLCV' => false,
                'fetchOpenOrders' => null,                   // has, but not yet implemented, see /order
                'fetchOrder' => null,                        // has, but not yet implemented
                'fetchOrderBook' => true,                         // v4/orderBook/L2, requires symbol, supports depth with default 25
                'fetchOrders' => false,                           // has, but not yet implemented, see /order with open=false
                'fetchPositionMode' => false,
                'fetchStatus' => null,                       // not implemented
                'fetchTicker' => null,                       // not implemented, available via fetchMarkets endpoint response
                'fetchTickers' => null,                      // see above
                'fetchTime' => null,                         // not implemented
                'fetchTrades' => null,
                'fetchTradingFee' => null,
                'fetchTradingFees' => null,
                'fetchTransactionFees' => null,
                'fetchTransactions' => null,
                'fetchTransfers' => null,
                'fetchWithdrawals' => null,
                'transfer' => null,
                'withdraw' => null,
            ),
            'timeframes' => array(
                // did not check these for OSL
                '1m' => '1m',
                '5m' => '5m',
                '15m' => '15m',
                '30m' => '30m',
                '1h' => '1H',
                '2h' => '2H',
                '4h' => '4H',
                '1d' => '1D',
                '1w' => '1W',
            ),
            'urls' => array(
                'api' => array(
                    // other api endpoints are trade-am and trade-hk, not implemented
                    '2' => 'https://trade-sg.osl.com/api/2',   // used for ticker data
                    '3' => 'https://trade-sg.osl.com/api/3',   // used for currency list and markets
                    'v4' => 'https://trade-sg.osl.com/api/v4', // used for balances
                ),
                'www' => 'https://osl.com',
                'referral' => '',
                'doc' => array(
                    'https://docs.osl.com/',
                ),
                'fees' => 'https://support.osl.com/s/article/Are-there-trading-fees-on-the-Exchange',
            ),
            'requiredCredentials' => array(
                'apiKey' => true,
                'secret' => true,
            ),
            'api' => array(
                'v2' => array(
                    // Ticker get would go here
                ),
                'v3' => array(
                    'public' => array(
                        'get' => array(
                            'currencyStatic' => 1,
                        ),
                    ),
                ),
                'v4' => array(
                    'private' => array(
                        'get' => array(
                            'instrument' => 1,
                            'user/wallet' => 1,
                            'orderBook/L2' => 1,
                        ),
                    ),
                ),
            ),
            'options' => array(
            ),
            'precisionMode' => DECIMAL_PLACES,
        ));
    }

    public function cost_to_precision($symbol, $cost) {
        return $this->decimal_to_precision($cost, TRUNCATE, $this->markets[$symbol]['precision']['quote'], $this->precisionMode, $this->paddingMode);
    }

    public function currency_to_precision($code, $fee, $networkCode = null) {
        // info is available in currencies only if the user has configured his api keys
        if ($this->safe_value($this->currencies[$code], 'precision') !== null) {
            return $this->decimal_to_precision($fee, TRUNCATE, $this->currencies[$code]['precision'], $this->precisionMode, $this->paddingMode);
        } else {
            return $this->number_to_string($fee);
        }
    }

    public function fetch_markets($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * retrieves data on all $markets for osl
             * @param {array} $params extra parameters specific to the exchange api endpoint
             * @return {[array]} an array of objects representing $market data
             */
            $markets = Async\await($this->v4PrivateGetInstrument ($params));
            // array(
            //     ...
            //     array(
            //         symbol => 'SNXUSD',
            //         currency => 'SNX',
            //         settlCurrency => 'USD',
            //         highPrice => '2.99430',
            //         lowPrice => '2.99430',
            //         bidPrice => '3.00730',
            //         askPrice => '3.02590',
            //         lastPrice => '2.99430',
            //         minPrice => '2.14900',
            //         maxPrice => '3.99100',
            //         minOrderQty => '1.00000000',
            //         maxOrderQty => '125282.00000000',
            //         minValue => '10.00000',
            //         maxValue => '500000.00000',
            //         prevClosePrice => null,
            //         volume => null,
            //         tickSize => '0.00010',
            //         stepSize => '1.00000000',
            //         priceDecimals => '5',
            //         quantityDecimals => '8',
            //         updateTime => null
            //     ),
            //     ...
            // )
            $result = array();
            for ($i = 0; $i < count($markets); $i++) {
                $market = $markets[$i];
                $id = $this->safe_string($market, 'symbol');
                $lowercaseId = $this->safe_string_lower($market, 'symbol');
                $baseId = $this->safe_string($market, 'currency');
                $quoteId = $this->safe_string($market, 'settlCurrency');
                $base = $this->safe_currency_code($baseId);
                $quote = $this->safe_currency_code($quoteId);
                $pricePrecision = $this->safe_string($market, 'priceDecimals');
                $amountPrecision = $this->safe_string($market, 'quantityDecimals');
                $entry = array(
                    'id' => $id,
                    'lowercaseId' => $lowercaseId,
                    'symbol' => $base . '/' . $quote,
                    'base' => $base,
                    'quote' => $quote,
                    'settle' => null,
                    'baseId' => $baseId,
                    'quoteId' => $quoteId,
                    'settleId' => null,
                    'type' => 'spot',
                    'spot' => true,
                    'margin' => false,
                    'swap' => false,
                    'future' => false,
                    'option' => false,
                    'active' => true,
                    'contract' => false,
                    'linear' => null,
                    'inverse' => null,
                    'contractSize' => null,
                    'expiry' => null,
                    'expiryDatetime' => null,
                    'strike' => null,
                    'optionType' => null,
                    'precision' => array(
                        'amount' => $this->parse_number($this->parse_precision($amountPrecision)),
                        'price' => $this->parse_number($this->parse_precision($pricePrecision)),
                        'base' => 5, // $this->parse_number($this->parse_precision($this->safe_string($market, ''))),
                        'quote' => 5, // $this->parse_number($this->parse_precision($this->safe_string($market, 'quotePrecision'))),
                    ),
                    'limits' => array(
                        'leverage' => array(
                            'min' => null,
                            'max' => null,
                        ),
                        'amount' => array(
                            'min' => 0,
                            'max' => 10,
                        ),
                        'price' => array(
                            'min' => null,
                            'max' => null,
                        ),
                        'cost' => array(
                            'min' => 0,
                            'max' => null,
                        ),
                    ),
                    'info' => $market,
                );
                $result[] = $entry;
            }
            return $result;
        }) ();
    }

    public function parse_balance($response) {
        $timestamp = $this->milliseconds();
        $result = array(
            'info' => $response,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
        );
        $balances = $this->is_array($response) ? $response : array();
        for ($i = 0; $i < count($balances); $i++) {
            $balance = $balances[$i];
            $currencyId = $this->safe_string($balance, 'currency');
            $code = $this->safe_currency_code($currencyId);
            $account = $this->account();
            $account['free'] = $this->safe_string($balance, 'exchangeAvailableBalance');
            $account['total'] = $this->safe_string($balance, 'exchangeTotalBalance');
            $result[$code] = $account;
        }
        return $this->safe_balance($result);
    }

    public function fetch_balance($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * query for balance and get the amount of funds available for trading or funds locked in orders
             * @param {array} $params extra parameters specific to the osl api endpoint
             * @return {array} a ~@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure balance structure~
             */
            Async\await($this->load_markets());
            $response = Async\await($this->v4PrivateGetUserWallet ($params));
            // array(
            //     array(
            //       exchangeAvailableBalance => '500.00000',
            //       exchangeTotalBalance => '500.00000',
            //       currency => 'USD'
            //     ),
            //     ...
            // )
            return $this->parse_balance($response);
        }) ();
    }

    public function fetch_order_book($symbol, $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $limit, $params) {
            /**
             * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
             * @param {string} $symbol unified $symbol of the $market to fetch the order book for
             * @param {int|null} $limit the maximum amount of order book entries to return
             * @param {array} $params extra parameters specific to the osl api endpoint
             * @return {array} A dictionary of {@link https://docs.ccxt.com/en/latest/manual.html#order-book-structure order book structures} indexed by $market symbols
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            if ($limit !== null) {
                $request['depth'] = $limit; // default 25, see https://docs.osl.com/#get-l2-order-book
            }
            $response = Async\await($this->v4PrivateGetOrderBookL2 (array_merge($request, $params)));
            // {
            //     $symbol => 'BTCUSDT',
            //     asks => array(
            //         array( '20202', '3' ),
            //         array( '20208', '5' ),
            //     ),
            //     bids => array(
            //         array( '20185', '1' ),
            //         array( '20184', '2' ),
            //     ),
            //     updateTime => '2022-08-29T15:45:18.015Z'
            // }
            $orderbook = $this->parse_order_book($response, $symbol);
            return $orderbook;
        }) ();
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        // ['v4', 'private']
        list($version) = $api;
        $type = $api[1];
        // v2 and v3 apis don't use 'v' prefix
        if ($version === 'v2') {
            $version = '2';
        } elseif ($version === 'v3') {
            $version = '3';
        }
        // $path = '/api/v4/';
        $url = $this->urls['api'][$version] . '/' . $this->implode_params($path, $params);
        // implodeParams and extractParams currently no-op for implemented paths
        // $pathForHmac = $version . '/' . $this->implode_params($path, $params);
        // $params = $this->omit($params, $this->extract_params($path));
        $tonce = $this->seconds() + 10;
        // $type is always 'private' for (currently implemented) v4 endpoints
        if ($type === 'private') {
            $this->check_required_credentials();
            $query = $this->urlencode($params);
            $headers = array(
                'api-key' => $this->$'apiKey',
                'api-expires' => $tonce,
            );
            if (($method === 'GET') || ($method === 'DELETE')) {
                if ($query) {
                    $url .= '?' . $query;
                    $path .= '?' . $query;
                }
                $data = $method . $this->encode('/api' . '/' . $version . '/' . $path) . $this->encode(string) ($tonce);
                $signature = $this->hmac($this->encode($data), base64_decode($this->secret), 'sha512', 'base64');
                $headers['api-signature'] = $signature;
            } else {
                $body = $query;
                $headers['Content-Type'] = 'application/x-www-form-urlencoded';
                $data = $method . $this->encode($path) . $this->encode(string) ($tonce) . $this->encode(json_encode ($body));
                $signature = $this->hmac($this->encode($data), base64_decode($this->$'secret'), 'sha512', 'base64');
                $headers['api-signature'] = $signature;
            }
        } else {
            if ($params) {
                $url .= '?' . $this->urlencode($params);
            }
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }
}
