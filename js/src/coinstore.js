// ----------------------------------------------------------------------------

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code
// EDIT THE CORRESPONDENT .ts FILE INSTEAD

//  ---------------------------------------------------------------------------
import Exchange from './abstract/coinstore.js';
import { AuthenticationError, ExchangeNotAvailable, PermissionDenied, ExchangeError, InsufficientFunds, BadRequest, OrderNotFound, NotSupported, DDoSProtection, BadSymbol, InvalidOrder, ArgumentsRequired } from './base/errors.js';
import { Precise } from './base/Precise.js';
import { sha256 } from './static_dependencies/noble-hashes/sha256.js';
import { DECIMAL_PLACES, TICK_SIZE } from './base/functions/number.js';
//  ---------------------------------------------------------------------------
export default class coinstore extends Exchange {
    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'coinstore',
            'name': 'Coinstore',
            'countries': ['SG'],
            'rateLimit': 1000,
            'version': 'v1',
            'certified': false,
            'pro': false,
            'has': {
                'CORS': undefined,
                'spot': true,
                'margin': false,
                'swap': false,
                'future': false,
                'option': false,
                'cancelAllOrders': false,
                'cancelOrder': false,
                'cancelOrders': false,
                'createOrder': false,
                'fetchBalance': false,
                'fetchClosedOrders': false,
                'fetchCurrencies': false,
                'fetchDeposits': false,
                'fetchDepositWithdrawFee': 'emulated',
                'fetchDepositWithdrawFees': false,
                'fetchFundingRate': false,
                'fetchFundingRateHistory': false,
                'fetchLeverage': false,
                'fetchMarkets': true,
                'fetchOHLCV': false,
                'fetchOpenInterest': false,
                'fetchOpenOrders': false,
                'fetchOrder': false,
                'fetchOrderBook': false,
                'fetchPositions': false,
                'fetchTicker': false,
                'fetchTickers': false,
                'fetchTime': false,
                'fetchTrades': false,
                'fetchTransfers': false,
                'fetchWithdrawals': false,
                'setLeverage': false,
                'setMargin': false,
                'setMarginMode': true,
                'transfer': true,
            },
            'hostname': 'coinstore.com',
            'urls': {
                'logo': 'https://github-production-user-asset-6210df.s3.amazonaws.com/1294454/253675376-6983b72e-4999-4549-b177-33b374c195e3.jpg',
                'api': {
                    'spot': 'https://api.{hostname}/api',
                },
                'www': 'https://www.coinstore.com/',
                'doc': 'https://coinstore-openapi.github.io/en/',
                'referral': undefined,
                'fees': 'https://www.coinstore.com/#/fee'
            },
            'requiredCredentials': {
                'apiKey': true,
                'secret': true,
            },
            'api': {
                'public': {
                    'get': {
                        // There is no public endpoint for markets, but we can use the ticker endpoint
                        'api/v1/market/tickers': 3,
                    }
                },
                'private': {
                    'get': {

                    },
                    'post': {
                        // fetch markets. Yes, this is private
                        'v2/public/config/spot/symbols': 3,
                        // fetch trades
                        'v2/trade/match/accountMatches': 3,
                        // get balances
                        'spot/accountList': 3,
                    },
                },
            },
            'timeframes': {
                '1m': '1m',
                '3m': '3m',
                '5m': '5m',
                '15m': '15m',
                '30m': '30m',
                '1h': '1h',
                '2h': '2h',
                '4h': '4h',
                '6h': '6h',
                '12h': '12h',
                '1d': '1d',
                '3d': '3d',
                '1w': '1w',
                '1M': '1M',
            },
            'fees': {
                'trading': {},
            },
            'precisionMode': TICK_SIZE,
            'exceptions': {
                'exact': {
                    '400': BadRequest,
                    '401': AuthenticationError,
                    '403': PermissionDenied,
                    '404': BadRequest,
                    '429': DDoSProtection,
                    // '418': PermissionDenied,
                    '500': ExchangeError,
                    // '504': ExchangeError,
                    // '100001': AuthenticationError,
                    // '100202': InsufficientFunds,
                    // '100400': BadRequest,
                    // '100440': ExchangeError,
                    // '100500': ExchangeError,
                    // '100503': ExchangeError,
                    // '80001': BadRequest,
                    // '80012': ExchangeNotAvailable,
                    // '80014': BadRequest,
                    // '80016': OrderNotFound,
                    // '80017': OrderNotFound,
                    // '100437': BadRequest, // {"code":100437,"msg":"The withdrawal amount is lower than the minimum limit, please re-enter.","timestamp":1689258588845}
                },
                'broad': {},
            },
            'commonCurrencies': {},
        });
    }
    // async fetchCurrencies(params = {}) {
    //     /**
    //      * @method
    //      * @name coinstore#fetchCurrencies
    //      * @description fetches available currencies on an exchange
    //      * @see https://coinstore-openapi.github.io/en/#basic-information
    //      * @param {object} [params] extra parameters specific to the coinstore api endpoint
    //      * @returns {object} an associative dictionary of currencies
    //      */
    //     this.checkRequiredCredentials();

    //     // {
    //     //     "code": "0",
    //     //     "message": "Success",
    //     //     "data": [
    //     //         {
    //     //             "symbolId": 1,
    //     //             "symbolCode": "BTCUSDT",
    //     //             "tradeCurrencyCode": "btc",
    //     //             "quoteCurrencyCode": "usdt",
    //     //             "openTrade": true,
    //     //             "onLineTime": 1609813531019,
    //     //             "tickSz": 0,
    //     //             "lotSz": 4,
    //     //             "minLmtPr": "0.0002",
    //     //             "minLmtSz": "0.2",
    //     //             "minMktVa": "0.1",
    //     //             "minMktSz": "0.1",
    //     //             "makerFee": "0.006",
    //     //             "takerFee": "0.003"
    //     //         }
    //     //     ]
    //     // }
    //     // const response = await this.spotV2PrivatePostPublicConfigSpotSymbols(params);
        
    //     const data = this.safeValue(response, 'data', []);
    //     const result = {};
    //     for (let i = 0; i < data.length; i++) {
    //         const entry = data[i];
    //         const currencyId = this.safeString(entry, 'coin');
    //         const code = this.safeCurrencyCode(currencyId);
    //         const name = this.safeString(entry, 'name');
    //         const networkList = this.safeValue(entry, 'networkList');
    //         const networks = {};
    //         let fee = undefined;
    //         let active = undefined;
    //         let withdrawEnabled = undefined;
    //         let defaultLimits = {};
    //         for (let j = 0; j < networkList.length; j++) {
    //             const rawNetwork = networkList[j];
    //             const network = this.safeString(rawNetwork, 'network');
    //             const networkCode = this.networkIdToCode(network);
    //             const isDefault = this.safeValue(rawNetwork, 'isDefault');
    //             withdrawEnabled = this.safeValue(rawNetwork, 'withdrawEnable');
    //             const limits = {
    //                 'amounts': { 'min': this.safeNumber(rawNetwork, 'withdrawMin'), 'max': this.safeNumber(rawNetwork, 'withdrawMax') },
    //             };
    //             if (isDefault) {
    //                 fee = this.safeNumber(rawNetwork, 'withdrawFee');
    //                 active = withdrawEnabled;
    //                 defaultLimits = limits;
    //             }
    //             networks[networkCode] = {
    //                 'info': rawNetwork,
    //                 'id': network,
    //                 'network': networkCode,
    //                 'fee': fee,
    //                 'active': active,
    //                 'deposit': undefined,
    //                 'withdraw': withdrawEnabled,
    //                 'precision': undefined,
    //                 'limits': limits,
    //             };
    //         }
    //         result[code] = {
    //             'info': entry,
    //             'code': code,
    //             'id': currencyId,
    //             'precision': undefined,
    //             'name': name,
    //             'active': active,
    //             'deposit': undefined,
    //             'withdraw': withdrawEnabled,
    //             'networks': networks,
    //             'fee': fee,
    //             'limits': defaultLimits,
    //         };
    //     }
    //     return result;
    // }
    async fetchMarkets(params = {}) {
        /**
         * Uses tickers endpoint since coinstore doesn't have a market data endpoint:
         * https://api.coinstore.com/api/v2/public/config/spot/symbols
         * 
         * @method
         * @name coinstore#fetchMarkets
         * @description retrieves data on spot markets for coinstore
         * @see https://coinstore-openapi.github.io/en/#ticker-related
         * @param {object} [params] extra parameters specific to the exchange api endpoint
         * @returns {[object]} an array of objects representing market data
         */
        let markets = await this.privatePostV2PublicConfigSpotSymbols();
        markets = this.safeValue(markets, 'data');


        let result = [];
        // {
        //     "code": "0",
        //     "message": "Success",
        //     "data": [
        //         {
        //             "symbolId": 1,
        //             "symbolCode": "BTCUSDT",
        //             "tradeCurrencyCode": "btc",
        //             "quoteCurrencyCode": "usdt",
        //             "openTrade": true,
        //             "onLineTime": 1609813531019,
        //             "tickSz": 0,
        //             "lotSz": 4,
        //             "minLmtPr": "0.0002",
        //             "minLmtSz": "0.2",
        //             "minMktVa": "0.1",
        //             "minMktSz": "0.1",
        //             "makerFee": "0.006",
        //             "takerFee": "0.003"
        //         }
        //     ]
        // }
        for (let i = 0; i < markets.length; i++) {
            let market = markets[i];
            let id = this.safeString(market, 'symbolCode');
            let baseId = this.safeStringUpper(market, 'tradeCurrencyCode').toUpperCase();
            let quoteId = this.safeStringUpper(market, 'quoteCurrencyCode').toLowerCase();
            let base = this.safeCurrencyCode(baseId);
            let quote = this.safeCurrencyCode(quoteId);
            let symbol = base + '/' + quote;
            let lowercaseId = this.safeStringLower(market, 'symbolCode');
            let active = this.safeValue(market, 'openTrade');
            let pricePrecision = this.safeNumber(market, 'tickSz');
            let amountPrecision = this.safeNumber(market, 'lotSz');
            let minSize = this.safeNumber(market, 'minLmtSz');
            let minPrice = this.safeNumber(market, 'minLmtPr');
            const entry = {
                'id': id,
                'lowercaseId': lowercaseId,
                'symbol': symbol,
                'base': base,
                'quote': quote,
                'settle': undefined,
                'baseId': baseId,
                'quoteId': quoteId,
                'settleId': undefined,
                'type': 'spot',
                'spot': true,
                'margin': false,
                'swap': false,
                'future': false,
                'delivery': false,
                'option': false,
                'active': active !== false,
                'contract': false,
                'linear': undefined,
                'inverse': undefined,
                'contractSize': undefined,
                'expiry': undefined,
                'expiryDatetime': undefined,
                'strike': undefined,
                'optionType': undefined,
                'precision': {
                    'amount': this.parseNumber(this.parsePrecision(amountPrecision)),
                    'price': this.parseNumber(this.parsePrecision(pricePrecision)),
                    'base': undefined,
                    'quote': undefined,
                },
                'limits': {
                    'leverage': {
                        'min': undefined,
                        'max': undefined,
                    },
                    'amount': {
                        'min': minSize,
                        'max': undefined,
                    },
                    'price': {
                        'min': minPrice,
                        'max': undefined,
                    },
                    'cost': {
                        'min': undefined,
                        'max': undefined,
                    },
                },
                'info': market,
            };
            result.push(entry);
            return result;
        }
    }
    // async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
    //     /**
    //      * @method
    //      * @name bingx#fetchOHLCV
    //      * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
    //      * @see https://bingx-api.github.io/docs/#/swapV2/market-api.html#K-Line%20Data
    //      * @param {string} symbol unified symbol of the market to fetch OHLCV data for
    //      * @param {string} timeframe the length of time each candle represents
    //      * @param {int} [since] timestamp in ms of the earliest candle to fetch
    //      * @param {int} [limit] the maximum amount of candles to fetch
    //      * @param {object} [params] extra parameters specific to the bingx api endpoint
    //      * @param {string} [params.price] "mark" or "index" for mark price and index price candles
    //      * @param {int} [params.until] timestamp in ms of the latest candle to fetch
    //      * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
    //      */
    //     await this.loadMarkets();
    //     const market = this.market(symbol);
    //     const request = {
    //         'symbol': market['id'],
    //     };
    //     request['interval'] = this.safeString(this.timeframes, timeframe, timeframe);
    //     if (since !== undefined) {
    //         request['startTime'] = since;
    //     }
    //     if (limit !== undefined) {
    //         request['limit'] = limit;
    //     }
    //     else {
    //         request['limit'] = 50;
    //     }
    //     if (market['spot']) {
    //         throw new NotSupported(this.id + ' fetchOHLCV is not supported for spot markets');
    //     }
    //     const response = await this.swapV2PublicGetQuoteKlines(this.extend(request, params));
    //     //
    //     //    {
    //     //        "code": 0,
    //     //        "msg": "",
    //     //        "data": [
    //     //          {
    //     //            "open": "19396.8",
    //     //            "close": "19394.4",
    //     //            "high": "19397.5",
    //     //            "low": "19385.7",
    //     //            "volume": "110.05",
    //     //            "time": 1666583700000
    //     //          },
    //     //          ...
    //     //        ]
    //     //    }
    //     //
    //     let ohlcvs = this.safeValue(response, 'data', []);
    //     if (typeof ohlcvs === 'object') {
    //         ohlcvs = [ohlcvs];
    //     }
    //     return this.parseOHLCVs(ohlcvs, market, timeframe, since, limit);
    // }
    // parseOHLCV(ohlcv, market = undefined) {
    //     //
    //     //    {
    //     //        "open": "19394.4",
    //     //        "close": "19379.0",
    //     //        "high": "19394.4",
    //     //        "low": "19368.3",
    //     //        "volume": "167.44",
    //     //        "time": 1666584000000
    //     //    }
    //     //
    //     return [
    //         this.safeInteger(ohlcv, 'time'),
    //         this.safeNumber(ohlcv, 'open'),
    //         this.safeNumber(ohlcv, 'high'),
    //         this.safeNumber(ohlcv, 'low'),
    //         this.safeNumber(ohlcv, 'close'),
    //         this.safeNumber(ohlcv, 'volume'),
    //     ];
    // }
    // async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
    //     /**
    //      * @method
    //      * @name coinstore#fetchTrades
    //      * @description get the list of most recent trades for a particular symbol
    //      * @see https://coinstore-openapi.github.io/en/#get-user-39-s-latest-trade
    //      * @param {string} symbol unified symbol of the market to fetch trades for
    //      * @param {void} [since] unused
    //      * @param {number} [limit] the maximum amount of trades to fetch
    //      * @param {object} [params] extra parameters specific to the coinstore api endpoint
    //      * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
    //      */
    //     await this.loadMarkets();
    //     const market = this.market(symbol);
    //     const request = {
    //         'symbol': market['id'],
    //     };
    //     if (limit !== undefined) {
    //         request['pageSize'] = limit;
    //     }
    //     let response = undefined;
    //     let marketType = undefined;
    //     [marketType, params] = this.handleMarketTypeAndParams ('fetchTrades', market, params);
    //     response = await this.v2PrivatePostTradeMatchAccountMatches (this.extend(request, params));
    //     //
    //     // spot
    //     //
    //     //    {
    //     //        "code": 0,
    //     //        "data": [
    //     //            {
    //     //                "id": 43148253,
    //     //                "price": 25714.71,
    //     //                "qty": 1.674571,
    //     //                "time": 1655085975589,
    //     //                "buyerMaker": false
    //     //            }
    //     //        ]
    //     //    }
    //     //
    //     // swap
    //     //
    //     //    {
    //     //      "code":0,
    //     //      "msg":"",
    //     //      "data":[
    //     //        {
    //     //          "time": 1672025549368,
    //     //          "isBuyerMaker": true,
    //     //          "price": "16885.0",
    //     //          "qty": "3.3002",
    //     //          "quoteQty": "55723.87"
    //     //        },
    //     //        ...
    //     //      ]
    //     //    }
    //     //
    //     const trades = this.safeValue(response, 'data', []);
    //     return this.parseTrades(trades, market, since, limit);
    // }
    parseTrade(trade, market = undefined) {
        //
        // spot
        // fetchTrades
        //
        //    {
        //        "id": 43148253,
        //        "price": 25714.71,
        //        "qty": 1.674571,
        //        "time": 1655085975589,
        //        "buyerMaker": false
        //    }
        //
        // swap
        // fetchTrades
        //
        //    {
        //        "time": 1672025549368,
        //        "isBuyerMaker": true,
        //        "price": "16885.0",
        //        "qty": "3.3002",
        //        "quoteQty": "55723.87"
        //    }
        //
        // swap
        // fetchMyTrades
        //
        //    {
        //        volume: '0.1',
        //        price: '106.75',
        //        amount: '10.6750',
        //        commission: '-0.0053',
        //        currency: 'USDT',
        //        orderId: '1676213270274379776',
        //        liquidatedPrice: '0.00',
        //        liquidatedMarginRatio: '0.00',
        //        filledTime: '2023-07-04T20:56:01.000+0800'
        //    }
        //
        let time = this.safeInteger2(trade, 'time', 'filledTm');
        const datetimeId = this.safeString(trade, 'filledTm');
        if (datetimeId !== undefined) {
            time = this.parse8601(datetimeId);
        }
        const isBuyerMaker = this.safeValue2(trade, 'buyerMaker', 'isBuyerMaker');
        const cost = this.safeString(trade, 'quoteQty');
        const type = (cost === undefined) ? 'spot' : 'swap';
        const currencyId = this.safeString(trade, 'currency');
        const currencyCode = this.safeCurrencyCode(currencyId);
        return this.safeTrade({
            'id': this.safeString2(trade, 'id', 'orderId'),
            'info': trade,
            'timestamp': time,
            'datetime': this.iso8601(time),
            'symbol': this.safeSymbol(undefined, market, '-', type),
            'order': undefined,
            'type': undefined,
            'side': undefined,
            'takerOrMaker': (isBuyerMaker === true) ? 'maker' : 'taker',
            'price': this.safeString(trade, 'price'),
            'amount': this.safeString2(trade, 'qty', 'amount'),
            'cost': cost,
            'fee': {
                'cost': this.parseNumber(Precise.stringAbs(this.safeString(trade, 'commission'))),
                'currency': currencyCode,
                'rate': undefined,
            },
        }, market);
    }
    // async fetchOrderBook(symbol, limit = undefined, params = {}) {
    //     /**
    //      * @method
    //      * @name bingx#fetchOrderBook
    //      * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
    //      * @see https://bingx-api.github.io/docs/#/spot/market-api.html#Query%20depth%20information
    //      * @see https://bingx-api.github.io/docs/#/swapV2/market-api.html#Get%20Market%20Depth
    //      * @param {string} symbol unified symbol of the market to fetch the order book for
    //      * @param {int} [limit] the maximum amount of order book entries to return
    //      * @param {object} [params] extra parameters specific to the bingx api endpoint
    //      * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
    //      */
    //     await this.loadMarkets();
    //     const market = this.market(symbol);
    //     const request = {
    //         'symbol': market['id'],
    //     };
    //     if (limit !== undefined) {
    //         request['limit'] = limit;
    //     }
    //     let response = undefined;
    //     let marketType = undefined;
    //     [marketType, params] = this.handleMarketTypeAndParams('fetchOrderBook', market, params);
    //     if (marketType === 'spot') {
    //         response = await this.spotV1PublicGetMarketDepth(this.extend(request, params));
    //     }
    //     else {
    //         response = await this.swapV2PublicGetQuoteDepth(this.extend(request, params));
    //     }
    //     //
    //     // spot
    //     //
    //     //     {
    //     //         "code": 0,
    //     //         "data": {
    //     //           "bids": [
    //     //             [
    //     //               "26324.73",
    //     //               "0.37655"
    //     //             ],
    //     //             [
    //     //               "26324.71",
    //     //               "0.31888"
    //     //             ],
    //     //         ],
    //     //         "asks": [
    //     //             [
    //     //               "26340.30",
    //     //               "6.45221"
    //     //             ],
    //     //             [
    //     //               "26340.15",
    //     //               "6.73261"
    //     //             ],
    //     //         ]}
    //     //     }
    //     //
    //     // swap
    //     //
    //     //     {
    //     //         "code": 0,
    //     //         "msg": "",
    //     //         "data": {
    //     //           "T": 1683914263304,
    //     //           "bids": [
    //     //             [
    //     //               "26300.90000000",
    //     //               "30408.00000000"
    //     //             ],
    //     //             [
    //     //               "26300.80000000",
    //     //               "50906.00000000"
    //     //             ],
    //     //         ],
    //     //         "asks": [
    //     //             [
    //     //               "26301.00000000",
    //     //               "43616.00000000"
    //     //             ],
    //     //             [
    //     //               "26301.10000000",
    //     //               "49402.00000000"
    //     //             ],
    //     //         ]}
    //     //     }
    //     //
    //     const orderbook = this.safeValue(response, 'data', {});
    //     const timestamp = this.safeInteger2(orderbook, 'T', 'ts');
    //     return this.parseOrderBook(orderbook, market['symbol'], timestamp, 'bids', 'asks', 0, 1);
    // }

    // async fetchTicker(symbol, params = {}) {
    //     /**
    //      * @method
    //      * @name coinstore#fetchTicker
    //      * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
    //      * @see https://coinstore-openapi.github.io/en/#ticker-related
    //      * @param {string} symbol unified symbol of the market to fetch the ticker for
    //      * @param {object} [params] extra parameters specific to the bingx api endpoint
    //      * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
    //      */
    //     await this.loadMarkets();
    //     const market = this.market(symbol);
    //     if (!market['swap']) {
    //         throw new BadRequest(this.id + ' fetchTicker is only supported for swap markets.');
    //     }
    //     const request = {
    //         'symbol': market['id'],
    //     };
    //     const response = await this.swapV2PublicGetQuoteTicker(this.extend(request, params));
    //     //
    //     //    {
    //     //        "code": 0,
    //     //        "msg": "",
    //     //        "data": {
    //     //          "symbol": "BTC-USDT",
    //     //          "priceChange": "52.5",
    //     //          "priceChangePercent": "0.31",
    //     //          "lastPrice": "16880.5",
    //     //          "lastQty": "2.2238",
    //     //          "highPrice": "16897.5",
    //     //          "lowPrice": "16726.0",
    //     //          "volume": "245870.1692",
    //     //          "quoteVolume": "4151395117.73",
    //     //          "openPrice": "16832.0",
    //     //          "openTime": 1672026667803,
    //     //          "closeTime": 1672026648425
    //     //        }
    //     //    }
    //     //
    //     const data = this.safeValue(response, 'data');
    //     return this.parseTicker(data, market);
    // }
    async fetchTickers(symbols = undefined, params = {}) {
        /**
         * @method
         * @name bingx#fetchTickers
         * @description fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
         * @see https://bingx-api.github.io/docs/#/swapV2/market-api.html#Get%20Ticker
         * @param {[string]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
         * @param {object} [params] extra parameters specific to the bingx api endpoint
         * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
         */
        await this.loadMarkets();
        if (symbols !== undefined) {
            symbols = this.marketSymbols(symbols);
            const firstSymbol = this.safeString(symbols, 0);
            const market = this.market(firstSymbol);
            if (!market['swap']) {
                throw new BadRequest(this.id + ' fetchTicker is only supported for swap markets.');
            }
        }
        const response = await this.swapV2PublicGetQuoteTicker(params);
        //
        //    {
        //        "code": 0,
        //        "msg": "",
        //        "data": [
        //            {
        //                "symbol": "BTC-USDT",
        //                "priceChange": "52.5",
        //                "priceChangePercent": "0.31",
        //                "lastPrice": "16880.5",
        //                "lastQty": "2.2238",
        //                "highPrice": "16897.5",
        //                "lowPrice": "16726.0",
        //                "volume": "245870.1692",
        //                "quoteVolume": "4151395117.73",
        //                "openPrice": "16832.0",
        //                "openTime": 1672026667803,
        //                "closeTime": 1672026648425
        //            },
        //        ]
        //    }
        //
        const tickers = this.safeValue(response, 'data');
        return this.parseTickers(tickers, symbols);
    }
    parseTicker(ticker, market = undefined) {
        //
        //    {
        //        "symbol": "BTC-USDT",
        //        "priceChange": "52.5",
        //        "priceChangePercent": "0.31",
        //        "lastPrice": "16880.5",
        //        "lastQty": "2.2238",
        //        "highPrice": "16897.5",
        //        "lowPrice": "16726.0",
        //        "volume": "245870.1692",
        //        "quoteVolume": "4151395117.73",
        //        "openPrice": "16832.0",
        //        "openTime": 1672026667803,
        //        "closeTime": 1672026648425
        //    }
        //
        const marketId = this.safeString(ticker, 'symbol');
        const defaultType = this.safeString(this.options, 'defaultType', 'swap');
        const symbol = this.safeSymbol(marketId, market, '-', defaultType);
        const open = this.safeString(ticker, 'openPrice');
        const high = this.safeString(ticker, 'highPrice');
        const low = this.safeString(ticker, 'lowPrice');
        const close = this.safeString(ticker, 'lastPrice');
        const quoteVolume = this.safeString(ticker, 'quoteVolume');
        const baseVolume = this.safeString(ticker, 'volume');
        const change = this.safeString(ticker, 'chapriceChangenge');
        const percentage = this.safeString(ticker, 'priceChangePercent');
        return this.safeTicker({
            'symbol': symbol,
            'timestamp': undefined,
            'datetime': undefined,
            'high': high,
            'low': low,
            'bid': undefined,
            'bidVolume': undefined,
            'ask': undefined,
            'askVolume': undefined,
            'vwap': undefined,
            'open': open,
            'close': close,
            'last': undefined,
            'previousClose': undefined,
            'change': change,
            'percentage': percentage,
            'average': undefined,
            'baseVolume': baseVolume,
            'quoteVolume': quoteVolume,
            'info': ticker,
        }, market);
    }
    async fetchBalance(params = {}) {
        /**
         * @method
         * @name coinstore#fetchBalance
         * @description query for balance and get the amount of funds available for trading or funds locked in orders
         * @see https://coinstore-openapi.github.io/en/#assets-balance
         * @param {object} [params] extra parameters specific to the conistore api endpoint
         * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
         */
        let response = await this.privatePostSpotAccountList();
        return response;
    }
    parseBalance(response) {
        const data = this.safeValue(response, 'data');
        const balances = this.safeValue2(data, 'balance', 'balances');
        const result = { 'info': response };
        if (Array.isArray(balances)) {
            for (let i = 0; i < balances.length; i++) {
                const balance = balances[i];
                const currencyId = this.safeString(balance, 'asset');
                const code = this.safeCurrencyCode(currencyId);
                const account = this.account();
                account['free'] = this.safeString(balance, 'free');
                account['used'] = this.safeString(balance, 'locked');
                result[code] = account;
            }
        }
        else {
            const currencyId = this.safeString(balances, 'asset');
            const code = this.safeCurrencyCode(currencyId);
            const account = this.account();
            account['free'] = this.safeString(balances, 'availableMargin');
            account['used'] = this.safeString(balances, 'usedMargin');
            result[code] = account;
        }
        return this.safeBalance(result);
    }
    async createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        /**
         * @method
         * @name bingx#createOrder
         * @description create a trade order
         * @see https://bingx-api.github.io/docs/#/spot/trade-api.html#Create%20an%20Order
         * @see https://bingx-api.github.io/docs/#/swapV2/trade-api.html#Trade%20order
         * @param {string} symbol unified symbol of the market to create an order in
         * @param {string} type 'market' or 'limit'
         * @param {string} side 'buy' or 'sell'
         * @param {float} amount how much of currency you want to trade in units of base currency
         * @param {float} [price] the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
         * @param {object} [params] extra parameters specific to the bingx api endpoint
         * @param {bool} [params.postOnly] true to place a post only order
         * @param {object} [params.triggerPrice] triggerPrice at which the attached take profit / stop loss order will be triggered (swap markets only)
         * @param {float} [params.stopLossPrice] stop loss trigger price (swap markets only)
         * @param {float} [params.takeProfitPrice] take profit trigger price (swap markets only)
         * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        let response = undefined;
        const [marketType, query] = this.handleMarketTypeAndParams('createOrder', market, params);
        type = type.toUpperCase();
        const request = {
            'symbol': market['id'],
            'type': type,
            'side': side.toUpperCase(),
        };
        const isMarketOrder = type === 'MARKET';
        const isSpotMarket = marketType === 'spot';
        let stopPriceRaw = undefined;
        let stopPrice = undefined;
        let stopLossPrice = undefined;
        let takeProfitPrice = undefined;
        if (!isSpotMarket) {
            stopPriceRaw = this.safeValue2(params, 'stopPrice', 'triggerPrice');
            if (stopPriceRaw !== undefined) {
                stopPrice = this.priceToPrecision(symbol, stopPriceRaw);
            }
            stopLossPrice = this.safeValue(params, 'stopLossPrice');
            takeProfitPrice = this.safeValue(params, 'takeProfitPrice');
        }
        if ((stopLossPrice !== undefined) && (takeProfitPrice !== undefined)) {
            throw new InvalidOrder('Order is either a takeProfit order or a stopLoss order');
        }
        if ((type === 'LIMIT') || (type === 'TRIGGER_LIMIT')) {
            request['price'] = this.priceToPrecision(symbol, price);
            if ((stopPrice !== undefined)) {
                request['type'] = 'TRIGGER_LIMIT';
                request['stopPrice'] = stopPrice;
            }
            if (type === 'TRIGGER_LIMIT') {
                if (stopPrice === undefined) {
                    throw new InvalidOrder('TRIGGER_LIMIT requires a triggerPrice / stopPrice');
                }
                request['stopPrice'] = stopPrice;
            }
        }
        if (isMarketOrder || (type === 'TRIGGER_MARKET')) {
            if ((stopPrice !== undefined)) {
                request['type'] = 'TRIGGER_MARKET';
                request['stopPrice'] = stopPrice;
            }
            if (type === 'TRIGGER_MARKET') {
                if (stopPrice === undefined) {
                    throw new InvalidOrder('TRIGGER_MARKET requires a triggerPrice / stopPrice');
                }
                request['stopPrice'] = stopPrice;
            }
        }
        const exchangeSpecificTifParam = this.safeStringUpperN(params, ['force', 'timeInForce']);
        let postOnly = undefined;
        [postOnly, params] = this.handlePostOnly(isMarketOrder, exchangeSpecificTifParam === 'POC', params);
        if (isSpotMarket) {
            const createMarketBuyOrderRequiresPrice = this.safeValue(this.options, 'createMarketBuyOrderRequiresPrice', true);
            if (createMarketBuyOrderRequiresPrice && isMarketOrder && (side === 'buy')) {
                if (price === undefined) {
                    throw new InvalidOrder(this.id + ' createOrder() requires price argument for market buy orders on spot markets to calculate the total amount to spend (amount * price), alternatively set the createMarketBuyOrderRequiresPrice option to false and pass in the cost to spend into the amount parameter');
                }
                else {
                    const amountString = this.numberToString(amount);
                    const priceString = this.numberToString(price);
                    const cost = this.parseNumber(Precise.stringMul(amountString, priceString));
                    request['quoteOrderQty'] = this.priceToPrecision(symbol, cost);
                }
            }
            else {
                request['quantity'] = this.amountToPrecision(symbol, amount);
            }
        }
        else {
            request['quantity'] = this.amountToPrecision(symbol, amount);
        }
        if ((stopLossPrice !== undefined)) {
            request['type'] = 'STOP_MARKET';
            request['stopPrice'] = this.priceToPrecision(symbol, stopLossPrice);
        }
        if ((takeProfitPrice !== undefined)) {
            request['type'] = 'TAKE_PROFIT_MARKET';
            request['stopPrice'] = this.priceToPrecision(symbol, takeProfitPrice);
        }
        request['timeInForce'] = 'IOC';
        if (postOnly) {
            request['timeInForce'] = 'POC';
        }
        else if (exchangeSpecificTifParam === 'POC') {
            request['timeInForce'] = 'POC';
        }
        if (isSpotMarket) {
            response = await this.spotV1PrivatePostTradeOrder(this.extend(request, query));
        }
        else {
            response = await this.swapV2PrivatePostTradeOrder(this.extend(request, query));
        }
        //
        // spot
        //    {
        //        "code": 0,
        //        "msg": "",
        //        "data": {
        //            "symbol": "XRP-USDT",
        //            "orderId": 1514090846268424192,
        //            "transactTime": 1649822362855,
        //            "price": "0.5",
        //            "origQty": "10",
        //            "executedQty": "0",
        //            "cummulativeQuoteQty": "0",
        //            "status": "PENDING",
        //            "type": "LIMIT",
        //            "side": "BUY"
        //        }
        //    }
        //
        // swap
        //
        //    {
        //        "code": 0,
        //        "msg": "",
        //        "data": {
        //          "order": {
        //            "symbol": "BTC-USDT",
        //            "orderId": 1590973236294713344,
        //            "side": "BUY",
        //            "positionSide": "LONG",
        //            "type": "LIMIT"
        //          }
        //        }
        //    }
        //
        const data = this.safeValue(response, 'data');
        const first = this.safeValue(data, 'order', data);
        return this.parseOrder(first, market);
    }
    parseOrder(order, market = undefined) {
        //
        // spot
        // createOrder, cancelOrder
        //
        //    {
        //        "symbol": "XRP-USDT",
        //        "orderId": 1514090846268424192,
        //        "transactTime": 1649822362855,
        //        "price": "0.5",
        //        "origQty": "10",
        //        "executedQty": "0",
        //        "cummulativeQuoteQty": "0",
        //        "status": "PENDING",
        //        "type": "LIMIT",
        //        "side": "BUY"
        //    }
        //
        // fetchOrder
        //
        //    {
        //        symbol: 'ETH-USDT',
        //        orderId: '1660602123001266176',
        //        price: '1700',
        //        origQty: '0.003',
        //        executedQty: '0',
        //        cummulativeQuoteQty: '0',
        //        status: 'PENDING',
        //        type: 'LIMIT',
        //        side: 'BUY',
        //        time: '1684753373276',
        //        updateTime: '1684753373276',
        //        origQuoteOrderQty: '0',
        //        fee: '0',
        //        feeAsset: 'ETH'
        //    }
        //
        // fetchOpenOrders, fetchClosedOrders
        //
        //   {
        //       "symbol": "XRP-USDT",
        //       "orderId": 1514073325788200960,
        //       "price": "0.5",
        //       "origQty": "20",
        //       "executedQty": "0",
        //       "cummulativeQuoteQty": "0",
        //       "status": "PENDING",
        //       "type": "LIMIT",
        //       "side": "BUY",
        //       "time": 1649818185647,
        //       "updateTime": 1649818185647,
        //       "origQuoteOrderQty": "0"
        //   }
        //
        //
        // swap
        // createOrder
        //
        //    {
        //      "symbol": "BTC-USDT",
        //      "orderId": 1590973236294713344,
        //      "side": "BUY",
        //      "positionSide": "LONG",
        //      "type": "LIMIT"
        //    }
        //
        // fetchOrder, fetchOpenOrders, fetchClosedOrders
        //
        //    {
        //        "symbol": "LINK-USDT",
        //        "orderId": 1585839271162413056,
        //        "side": "BUY",
        //        "positionSide": "LONG",
        //        "type": "TRIGGER_MARKET",
        //        "origQty": "5.0",
        //        "price": "9",
        //        "executedQty": "0.0",
        //        "avgPrice": "0",
        //        "cumQuote": "0",
        //        "stopPrice": "5",
        //        "profit": "0.0000",
        //        "commission": "0.000000",
        //        "status": "CANCELLED",
        //        "time": 1667631605000,
        //        "updateTime": 1667631605000
        //    }
        //
        const positionSide = this.safeString(order, 'positionSide');
        const marketType = (positionSide === undefined) ? 'spot' : 'swap';
        const marketId = this.safeString(order, 'symbol');
        const symbol = this.safeSymbol(marketId, market, '-', marketType);
        const orderId = this.safeString(order, 'orderId');
        const side = this.safeStringLower(order, 'side');
        const type = this.safeStringLower(order, 'type');
        const timestamp = this.safeInteger2(order, 'time', 'transactTime');
        const lastTradeTimestamp = this.safeInteger(order, 'updateTime');
        const price = this.safeString(order, 'price');
        const average = this.safeString(order, 'avgPrice');
        const amount = this.safeString(order, 'origQty');
        const filled = this.safeString(order, 'executedQty');
        const statusId = this.safeString(order, 'status');
        const fee = {
            'currency': this.safeString(order, 'feeAsset'),
            'rate': this.safeString2(order, 'fee', 'commission'),
        };
        return this.safeOrder({
            'info': order,
            'id': orderId,
            'clientOrderId': undefined,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'lastTradeTimestamp': lastTradeTimestamp,
            'symbol': symbol,
            'type': type,
            'timeInForce': undefined,
            'postOnly': undefined,
            'side': side,
            'price': price,
            'stopPrice': this.safeNumber(order, 'triggerPrice'),
            'triggerPrice': this.safeNumber(order, 'triggerPrice'),
            'average': average,
            'cost': undefined,
            'amount': amount,
            'filled': filled,
            'remaining': undefined,
            'status': this.parseOrderStatus(statusId),
            'fee': fee,
            'trades': undefined,
        }, market);
    }
    parseOrderStatus(status) {
        const statuses = {
            'NEW': 'open',
            'PENDING': 'open',
            'PARTIALLY_FILLED': 'open',
            'FILLED': 'closed',
            'CANCELLED': 'canceled',
            'FAILED': 'failed',
        };
        return this.safeString(statuses, status, status);
    }
    async cancelOrder(id, symbol = undefined, params = {}) {
        /**
         * @method
         * @name bingx#cancelOrder
         * @description cancels an open order
         * @see https://bingx-api.github.io/docs/#/spot/trade-api.html#Cancel%20an%20Order
         * @see https://bingx-api.github.io/docs/#/swapV2/trade-api.html#Cancel%20an%20Order
         * @param {string} id order id
         * @param {string} symbol unified symbol of the market the order was made in
         * @param {object} [params] extra parameters specific to the bingx api endpoint
         * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        this.checkRequiredSymbol('cancelOrder', symbol);
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
            'orderId': id,
        };
        let response = undefined;
        const [marketType, query] = this.handleMarketTypeAndParams('cancelOrder', market, params);
        if (marketType === 'spot') {
            response = await this.spotV1PrivatePostTradeCancel(this.extend(request, query));
        }
        else {
            response = await this.swapV2PrivateDeleteTradeOrder(this.extend(request, query));
        }
        //
        // spot
        //
        //   {
        //       "code": 0,
        //       "msg": "",
        //       "data": {
        //           "symbol": "XRP-USDT",
        //           "orderId": 1514090846268424192,
        //           "price": "0.5",
        //           "origQty": "10",
        //           "executedQty": "0",
        //           "cummulativeQuoteQty": "0",
        //           "status": "CANCELED",
        //           "type": "LIMIT",
        //           "side": "BUY"
        //       }
        //   }
        //
        // swap
        //
        //    {
        //        "code": 0,
        //        "msg": "",
        //        "data": {
        //          "order": {
        //            "symbol": "LINK-USDT",
        //            "orderId": 1597783850786750464,
        //            "side": "BUY",
        //            "positionSide": "LONG",
        //            "type": "TRIGGER_MARKET",
        //            "origQty": "5.0",
        //            "price": "5.0000",
        //            "executedQty": "0.0",
        //            "avgPrice": "0.0000",
        //            "cumQuote": "0",
        //            "stopPrice": "5.0000",
        //            "profit": "",
        //            "commission": "",
        //            "status": "CANCELLED",
        //            "time": 1669776330000,
        //            "updateTime": 1669776330000
        //          }
        //        }
        //    }
        //
        const data = this.safeValue(response, 'data');
        const first = this.safeValue(data, 'order', data);
        return this.parseOrder(first, market);
    }
    async cancelAllOrders(symbol = undefined, params = {}) {
        /**
         * @method
         * @name bingx#cancelAllOrders
         * @description cancel all open orders
         * @see https://bingx-api.github.io/docs/#/swapV2/trade-api.html#Cancel%20All%20Orders
         * @param {string} [symbol] unified market symbol, only orders in the market of this symbol are cancelled when symbol is not undefined
         * @param {object} [params] extra parameters specific to the bingx api endpoint
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        this.checkRequiredSymbol('cancelAllOrders', symbol);
        await this.loadMarkets();
        const market = this.market(symbol);
        if (market['type'] !== 'swap') {
            throw new BadRequest(this.id + ' cancelAllOrders is only supported for swap markets.');
        }
        const request = {
            'symbol': market['id'],
        };
        const response = await this.swapV2PrivateDeleteTradeAllOpenOrders(this.extend(request, params));
        //
        //    {
        //        "code": 0,
        //        "msg": "",
        //        "data": {
        //          "success": [
        //            {
        //              "symbol": "LINK-USDT",
        //              "orderId": 1597783835095859200,
        //              "side": "BUY",
        //              "positionSide": "LONG",
        //              "type": "TRIGGER_LIMIT",
        //              "origQty": "5.0",
        //              "price": "9.0000",
        //              "executedQty": "0.0",
        //              "avgPrice": "0.0000",
        //              "cumQuote": "0",
        //              "stopPrice": "9.5000",
        //              "profit": "",
        //              "commission": "",
        //              "status": "NEW",
        //              "time": 1669776326000,
        //              "updateTime": 1669776326000
        //            }
        //          ],
        //          "failed": null
        //        }
        //    }
        //
        return response;
    }
    async cancelOrders(ids, symbol = undefined, params = {}) {
        /**
         * @method
         * @name bingx#cancelOrders
         * @description cancel multiple orders
         * @see https://bingx-api.github.io/docs/#/swapV2/trade-api.html#Cancel%20a%20Batch%20of%20Orders
         * @param {[string]} ids order ids
         * @param {string} symbol unified market symbol, default is undefined
         * @param {object} [params] extra parameters specific to the bingx api endpoint
         * @returns {object} an list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        this.checkRequiredSymbol('cancelOrders', symbol);
        await this.loadMarkets();
        const market = this.market(symbol);
        if (market['type'] !== 'swap') {
            throw new BadRequest(this.id + ' cancelOrders is only supported for swap markets.');
        }
        const request = {
            'symbol': market['id'],
            'ids': ids,
        };
        const response = await this.swapV2PrivateDeleteTradeBatchOrders(this.extend(request, params));
        //
        //    {
        //        "code": 0,
        //        "msg": "",
        //        "data": {
        //          "success": [
        //            {
        //              "symbol": "LINK-USDT",
        //              "orderId": 1597783850786750464,
        //              "side": "BUY",
        //              "positionSide": "LONG",
        //              "type": "TRIGGER_MARKET",
        //              "origQty": "5.0",
        //              "price": "5.5710",
        //              "executedQty": "0.0",
        //              "avgPrice": "0.0000",
        //              "cumQuote": "0",
        //              "stopPrice": "5.0000",
        //              "profit": "0.0000",
        //              "commission": "0.000000",
        //              "status": "CANCELLED",
        //              "time": 1669776330000,
        //              "updateTime": 1672370837000
        //            }
        //          ],
        //          "failed": null
        //        }
        //    }
        //
        return response;
    }
    async fetchOrder(id, symbol = undefined, params = {}) {
        /**
         * @method
         * @name bingx#fetchOrder
         * @description fetches information on an order made by the user
         * @see https://bingx-api.github.io/docs/#/spot/trade-api.html#Query%20Orders
         * @see https://bingx-api.github.io/docs/#/swapV2/trade-api.html#Query%20Order
         * @param {string} symbol unified symbol of the market the order was made in
         * @param {object} [params] extra parameters specific to the bingx api endpoint
         * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        this.checkRequiredSymbol('fetchOrders', symbol);
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
            'orderId': id,
        };
        let response = undefined;
        const [marketType, query] = this.handleMarketTypeAndParams('fetchOrder', market, params);
        if (marketType === 'spot') {
            response = await this.spotV1PrivateGetTradeQuery(this.extend(request, query));
        }
        else {
            response = await this.swapV2PrivateGetTradeOrder(this.extend(request, query));
        }
        //
        // spot
        //
        //     {
        //         "code": 0,
        //         "msg": "",
        //         "data": {
        //             "symbol": "XRP-USDT",
        //             "orderId": 1514087361158316032,
        //             "price": "0.5",
        //             "origQty": "10",
        //             "executedQty": "0",
        //             "cummulativeQuoteQty": "0",
        //             "status": "CANCELED",
        //             "type": "LIMIT",
        //             "side": "BUY",
        //             "time": 1649821532000,
        //             "updateTime": 1649821543000,
        //             "origQuoteOrderQty": "0",
        //             "fee": "0",
        //             "feeAsset": "XRP"
        //         }
        //     }
        //
        // swap
        //
        //      {
        //          "code": 0,
        //          "msg": "",
        //          "data": {
        //            "order": {
        //              "symbol": "BTC-USDT",
        //              "orderId": 1597597642269917184,
        //              "side": "SELL",
        //              "positionSide": "LONG",
        //              "type": "TAKE_PROFIT_MARKET",
        //              "origQty": "1.0000",
        //              "price": "0.0",
        //              "executedQty": "0.0000",
        //              "avgPrice": "0.0",
        //              "cumQuote": "",
        //              "stopPrice": "16494.0",
        //              "profit": "",
        //              "commission": "",
        //              "status": "FILLED",
        //              "time": 1669731935000,
        //              "updateTime": 1669752524000
        //            }
        //          }
        //      }
        //
        const data = this.safeValue(response, 'data');
        const first = this.safeValue(data, 'order', data);
        return this.parseOrder(first, market);
    }
    async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bingx#fetchOpenOrders
         * @see https://bingx-api.github.io/docs/#/spot/trade-api.html#Query%20Open%20Orders
         * @see https://bingx-api.github.io/docs/#/swapV2/trade-api.html#Query%20all%20current%20pending%20orders
         * @description fetch all unfilled currently open orders
         * @param {string} symbol unified market symbol
         * @param {int} [since] the earliest time in ms to fetch open orders for
         * @param {int} [limit] the maximum number of open order structures to retrieve
         * @param {object} [params] extra parameters specific to the bingx api endpoint
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        this.checkRequiredSymbol('fetchOrders', symbol);
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        let response = undefined;
        const [marketType, query] = this.handleMarketTypeAndParams('fetchOrder', market, params);
        if (marketType === 'spot') {
            response = await this.spotV1PrivateGetTradeOpenOrders(this.extend(request, query));
        }
        else {
            response = await this.swapV2PrivateGetTradeOpenOrders(this.extend(request, query));
        }
        //
        //  spot
        //
        //    {
        //        "code": 0,
        //        "msg": "",
        //        "data": {
        //            "orders": [
        //                {
        //                    "symbol": "XRP-USDT",
        //                    "orderId": 1514073325788200960,
        //                    "price": "0.5",
        //                    "origQty": "20",
        //                    "executedQty": "0",
        //                    "cummulativeQuoteQty": "0",
        //                    "status": "PENDING",
        //                    "type": "LIMIT",
        //                    "side": "BUY",
        //                    "time": 1649818185647,
        //                    "updateTime": 1649818185647,
        //                    "origQuoteOrderQty": "0"
        //                }
        //            ]
        //        }
        //    }
        //
        // swap
        //
        //    {
        //        "code": 0,
        //        "msg": "",
        //        "data": {
        //          "orders": [
        //            {
        //              "symbol": "LINK-USDT",
        //              "orderId": 1585839271162413056,
        //              "side": "BUY",
        //              "positionSide": "LONG",
        //              "type": "TRIGGER_MARKET",
        //              "origQty": "5.0",
        //              "price": "9",
        //              "executedQty": "0.0",
        //              "avgPrice": "0",
        //              "cumQuote": "0",
        //              "stopPrice": "5",
        //              "profit": "0.0000",
        //              "commission": "0.000000",
        //              "status": "CANCELLED",
        //              "time": 1667631605000,
        //              "updateTime": 1667631605000
        //            },
        //          ]
        //        }
        //    }
        //
        const data = this.safeValue(response, 'data', []);
        const orders = this.safeValue(data, 'orders', []);
        return this.parseOrders(orders, market, since, limit);
    }
    async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bingx#fetchClosedOrders
         * @description fetches information on multiple closed orders made by the user
         * @see https://bingx-api.github.io/docs/#/spot/trade-api.html#Query%20Order%20History
         * @see https://bingx-api.github.io/docs/#/swapV2/trade-api.html#User's%20Force%20Orders
         * @param {string} [symbol] unified market symbol of the market orders were made in
         * @param {int} [since] the earliest time in ms to fetch orders for
         * @param {int} [limit] the maximum number of  orde structures to retrieve
         * @param {object} [params] extra parameters specific to the bingx api endpoint
         * @param {int} [params.until] the latest time in ms to fetch orders for
         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        this.checkRequiredSymbol('fetchOrders', symbol);
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        let response = undefined;
        const [marketType, query] = this.handleMarketTypeAndParams('fetchOrder', market, params);
        if (marketType === 'spot') {
            response = await this.spotV1PrivateGetTradeHistoryOrders(this.extend(request, query));
        }
        else {
            response = await this.swapV2PrivateGetTradeAllOrders(this.extend(request, query));
        }
        //
        //  spot
        //
        //    {
        //        "code": 0,
        //        "msg": "",
        //        "data": {
        //            "orders": [
        //                {
        //                    "symbol": "XRP-USDT",
        //                    "orderId": 1514073325788200960,
        //                    "price": "0.5",
        //                    "origQty": "20",
        //                    "executedQty": "0",
        //                    "cummulativeQuoteQty": "0",
        //                    "status": "PENDING",
        //                    "type": "LIMIT",
        //                    "side": "BUY",
        //                    "time": 1649818185647,
        //                    "updateTime": 1649818185647,
        //                    "origQuoteOrderQty": "0"
        //                }
        //            ]
        //        }
        //    }
        //
        // swap
        //
        //    {
        //        "code": 0,
        //        "msg": "",
        //        "data": {
        //          "orders": [
        //            {
        //              "symbol": "LINK-USDT",
        //              "orderId": 1585839271162413056,
        //              "side": "BUY",
        //              "positionSide": "LONG",
        //              "type": "TRIGGER_MARKET",
        //              "origQty": "5.0",
        //              "price": "9",
        //              "executedQty": "0.0",
        //              "avgPrice": "0",
        //              "cumQuote": "0",
        //              "stopPrice": "5",
        //              "profit": "0.0000",
        //              "commission": "0.000000",
        //              "status": "CANCELLED",
        //              "time": 1667631605000,
        //              "updateTime": 1667631605000
        //            },
        //          ]
        //        }
        //    }
        //
        const data = this.safeValue(response, 'data', []);
        const orders = this.safeValue(data, 'orders', []);
        return this.parseOrders(orders, market, since, limit);
    }

    async fetchMyTrades(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name bingx#fetchMyTrades
         * @description fetch all trades made by the user
         * @see https://bingx-api.github.io/docs/#/swapV2/trade-api.html#Query%20historical%20transaction%20orders
         * @param {string} [symbol] unified market symbol
         * @param {int} [since] the earliest time in ms to fetch trades for
         * @param {int} [limit] the maximum number of trades structures to retrieve
         * @param {object} [params] extra parameters specific to the bingx api endpoint
         * @param {string} params.trandingUnit COIN (directly represent assets such as BTC and ETH) or CONT (represents the number of contract sheets)
         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
         */
        this.checkRequiredArgument('fetchMyTrades', symbol, 'symbol');
        this.checkRequiredArgument('fetchMyTrades', since, 'since');
        const tradingUnit = this.safeStringUpper(params, 'tradingUnit', 'CONT');
        await this.loadMarkets();
        const market = this.market(symbol);
        if (market['spot']) {
            throw new BadSymbol(this.id + ' fetchMyTrades() supports swap contracts only');
        }
        const request = {
            'symbol': market['id'],
            'tradingUnit': tradingUnit,
            'startTs': since,
            'endTs': this.nonce(),
        };
        const query = this.omit(params, 'tradingUnit');
        const response = await this.swapV2PrivateGetTradeAllFillOrders(this.extend(request, query));
        //
        //    {
        //       code: '0',
        //       msg: '',
        //       data: { fill_orders: [
        //          {
        //              volume: '0.1',
        //              price: '106.75',
        //              amount: '10.6750',
        //              commission: '-0.0053',
        //              currency: 'USDT',
        //              orderId: '1676213270274379776',
        //              liquidatedPrice: '0.00',
        //              liquidatedMarginRatio: '0.00',
        //              filledTime: '2023-07-04T20:56:01.000+0800'
        //          }
        //        ]
        //      }
        //    }
        //
        const data = this.safeValue(response, 'data', []);
        const fillOrders = this.safeValue(data, 'fill_orders', []);
        return this.parseTrades(fillOrders, market, since, limit, query);
    }

    sign(path, api = 'public', method = 'GET', params = {}, headers = {}, body = undefined) {
        /**
         * @method
         * @name coinstore#sign
         * @description signs and initiates the request
         * @see https://coinstore-openapi.github.io/en/#signature-authentication
         * @param {string} path the path to be appended to the URL
         * @param {'GET' | 'POST'} method extra parameters specific to the coinstore api endpoint
         * @param {object} [params] parameters to use for the path (for v1 symbols) or the query string
         * @param {object} [headers] headers to use for the request
         * @param {object} [body] body to use for the request
         * @returns {object} an associative dictionary of currencies
         */
        // let url = this.safeValue(this.safeValue(this.urls, 'api', {}), 'spot', 'https://api.{hostname}.com/api');
        let url = this['urls']['api']['spot'];
        url = this.implodeHostname(url);
        url += '/' + path;
        // v1 api implodes 'symbol' for some endpoints
        params = this.omit(params, this.extractParams(path));
        params = this.keysort(params);
        if (method === 'GET') {
            body = undefined;
        }
        else {
            body = {}
        }
        let paramString = this.urlencode(params);
        if (Object.keys(params).length) {
            url += '?' + paramString;
        }
        headers['Content-Type'] = 'application/json';
        if (api === 'private') {
            this.checkRequiredCredentials();
            let timestamp = this.milliseconds();
            // let timestamp = 1691200987053;
            headers['X-CS-EXPIRES'] = timestamp.toString();
            headers['X-CS-APIKEY'] = this.apiKey;
            let expiresKey = Math.floor(timestamp / 30000);
            let expiresHmac = this.hmac(this.encode(expiresKey.toString()), this.encode(this.secret), sha256, 'hex');
            console.log(expiresHmac);
            // headers['X-CS-SIGN'] = this.hmac(this.encode(paramString), this.encode(expiresHmac), sha256, 'hex');
            headers['X-CS-SIGN'] = this.hmac(this.encode('{}'), this.encode(expiresHmac), sha256, 'hex');
            console.log(headers);
            // throw new Error("aborting");
        }
        return { 'url': url, 'method': method, 'body': JSON.stringify(body), 'headers': headers };
    }
    nonce() {
        return this.milliseconds();
    }
    handleErrors(httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody) {
        if (response === undefined) {
            return undefined; // fallback to default error handler
        }
        //
        //    {
        //        "code": 80014,
        //        "msg": "Invalid parameters, err:Key: 'GetTickerRequest.Symbol' Error:Field validation for 'Symbol' failed on the 'len=0|endswith=-USDT' tag",
        //        "data": {
        //        }
        //    }
        //
        const code = this.safeString(response, 'code');
        const message = this.safeString(response, 'msg');
        if (code !== undefined && code !== '0') {
            const feedback = this.id + ' ' + body;
            this.throwExactlyMatchedException(this.exceptions['exact'], message, feedback);
            this.throwExactlyMatchedException(this.exceptions['exact'], code, feedback);
            this.throwBroadlyMatchedException(this.exceptions['broad'], message, feedback);
            throw new ExchangeError(feedback); // unknown message
        }
        return undefined;
    }
}
